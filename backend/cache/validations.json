{
  "version": "3.2",
  "log": [
    {
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "6358d7652737e83a25bf5fc263c1126d1b768ab8ef883b0b070212b3047ef5c2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "0db76a53041cd1a05babec75dfc03ea844dd92cd1278a69281ee37f6622c28ff",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "HackerHouseDAO": {
        "src": "contracts/HackerHouseDAO.sol:6",
        "version": {
          "withMetadata": "3f6aa10f6eea0aaebba632362b2cf5b37aa034019318575e12decfb1450e8ed4",
          "withoutMetadata": "5ef84c6a6e762b713ce4015b5b0093a79e672c8e5861c7c31795fae6789b1149",
          "linkedWithoutMetadata": "5ef84c6a6e762b713ce4015b5b0093a79e672c8e5861c7c31795fae6789b1149"
        },
        "inherit": [],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "initialize(address,uint256,address[],string,string)",
          "applyForMembership()",
          "fetchAllApplicants()",
          "approveApplicants(address[])",
          "proposeCohort(string,uint256,uint256,uint256,bool)",
          "joinCohort(uint256)",
          "getCohorts()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "initialized",
            "src": "contracts/HackerHouseDAO.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "parentAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:9"
            },
            {
              "label": "id",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:10"
            },
            {
              "label": "userId",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Counter)5_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:11"
            },
            {
              "label": "cohortId",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Counter)5_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:12"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:13"
            },
            {
              "label": "descriptionURI",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:14"
            },
            {
              "label": "coreTeam",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:15"
            },
            {
              "label": "membershipPrice",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:16"
            },
            {
              "label": "initialized",
              "offset": 0,
              "slot": "8",
              "type": "t_bool",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:17"
            },
            {
              "label": "users",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(User)478_storage)",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:18"
            },
            {
              "label": "userAddresses",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_address)dyn_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:19"
            },
            {
              "label": "cohorts",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_struct(Cohort)466_storage)",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(User)478_storage)": {
              "label": "mapping(address => struct HackerHouseDAO.User)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Cohort)466_storage)": {
              "label": "mapping(uint256 => struct HackerHouseDAO.Cohort)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Cohort)466_storage": {
              "label": "struct HackerHouseDAO.Cohort",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "trustee",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "nPersons",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slotsReserved",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "amountFunded",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "members",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "pricePerPerson",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "isCreatorSlot",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "10"
                },
                {
                  "label": "isFull",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_struct(Counter)5_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(User)478_storage": {
              "label": "struct HackerHouseDAO.User",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exists",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "userAddr",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "isMember",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "1"
                },
                {
                  "label": "approvers",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "NomadicVault": {
        "src": "contracts/NomadicVault.sol:9",
        "version": {
          "withMetadata": "cb6bfdef49f8c015cc5856717740712e09ca10d6afd1f0a3febb107e57a93b2d",
          "withoutMetadata": "aaf44fce5041e2f278797800873669ba3dcd880d909a9cc6a53702fbc6f7661d",
          "linkedWithoutMetadata": "aaf44fce5041e2f278797800873669ba3dcd880d909a9cc6a53702fbc6f7661d"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Counters",
          "console"
        ],
        "methods": [
          "(address)",
          "proposeShortStay(string,uint256,uint256,uint256,bool)",
          "joinShortStay(uint256)",
          "getShortStays(uint256[])",
          "checkDeadlines()",
          "proposeDAO(string,string,uint256)",
          "getActiveDAOs()",
          "getFormingDAOs()",
          "joinCoreTeam(uint256)",
          "getHackerHouseById(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NomadicVault",
            "src": "contracts/NomadicVault.sol:56"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numOfCoreTeam",
            "src": "contracts/NomadicVault.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "stays",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_struct(ShortStay)1162_storage)",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:40"
            },
            {
              "label": "hhouses",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(HackerHouse)1180_storage)",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:41"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:43"
            },
            {
              "label": "hhTemplate",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:44"
            },
            {
              "label": "hhAddresses",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:45"
            },
            {
              "label": "numOfCoreTeam",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:46"
            },
            {
              "label": "stayId",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Counter)5_storage",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:47"
            },
            {
              "label": "daoId",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(Counter)5_storage",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_struct(HackerHouse)1180_storage)": {
              "label": "mapping(uint256 => struct NomadicVault.HackerHouse)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ShortStay)1162_storage)": {
              "label": "mapping(uint256 => struct NomadicVault.ShortStay)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)5_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(HackerHouse)1180_storage": {
              "label": "struct NomadicVault.HackerHouse",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addr",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "coreTeam",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "coreTeamCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "membershipCost",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(ShortStay)1162_storage": {
              "label": "struct NomadicVault.ShortStay",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "trustee",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "nPersons",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slotsReserved",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "amountFunded",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "members",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "pricePerPerson",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "isCreatorSlot",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "10"
                },
                {
                  "label": "isFull",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "NomadicWorldCoin": {
        "src": "contracts/NomadicWorldCoin.sol:9",
        "version": {
          "withMetadata": "5c2c39c2d2d348af396e0c28aa51218b341422e17f5f019214d8dd34e00d97ed",
          "withoutMetadata": "753c35aaaf91e536bbf4884515b1d3544ea7ebb4a19d364f964a1dd7e0d15942",
          "linkedWithoutMetadata": "753c35aaaf91e536bbf4884515b1d3544ea7ebb4a19d364f964a1dd7e0d15942"
        },
        "inherit": [],
        "libraries": [
          "ByteHasher",
          "SafeMath",
          "Counters"
        ],
        "methods": [
          "(address)",
          "proposeShortStay(string,uint256,uint256,uint256,bool,uint256,uint256,uint256[8])",
          "joinShortStay(uint256)",
          "getShortStays(uint256[])",
          "checkDeadlines()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NomadicWorldCoin",
            "src": "contracts/NomadicWorldCoin.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "worldId",
            "src": "contracts/NomadicWorldCoin.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "groupId",
            "src": "contracts/NomadicWorldCoin.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "groupId",
            "src": "contracts/NomadicWorldCoin.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "nullifierHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:27"
            },
            {
              "label": "stays",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ShortStay)2123_storage)",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:47"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:48"
            },
            {
              "label": "stayId",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Counter)5_storage",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ShortStay)2123_storage)": {
              "label": "mapping(uint256 => struct NomadicWorldCoin.ShortStay)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)5_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ShortStay)2123_storage": {
              "label": "struct NomadicWorldCoin.ShortStay",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "trustee",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "nPersons",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slotsReserved",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "amountFunded",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "members",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "pricePerPerson",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "isCreatorSlot",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "10"
                },
                {
                  "label": "isFull",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ByteHasher": {
        "src": "contracts/helpers/ByteHasher.sol:4",
        "version": {
          "withMetadata": "8c7e55a67ab948819e01e6782776596b4fb1108cbfca927dfe2933de0dd75725",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWorldID": {
        "src": "contracts/interfaces/IWorldID.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(uint256,uint256,uint256,uint256,uint256,uint256[8])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "59f92ec65bbd88d02912ba405296a5a7c26c1fb880faee84220511dd2afb019c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "6358d7652737e83a25bf5fc263c1126d1b768ab8ef883b0b070212b3047ef5c2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "0db76a53041cd1a05babec75dfc03ea844dd92cd1278a69281ee37f6622c28ff",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "HackerHouseDAO": {
        "src": "contracts/HackerHouseDAO.sol:6",
        "version": {
          "withMetadata": "3f6aa10f6eea0aaebba632362b2cf5b37aa034019318575e12decfb1450e8ed4",
          "withoutMetadata": "5ef84c6a6e762b713ce4015b5b0093a79e672c8e5861c7c31795fae6789b1149",
          "linkedWithoutMetadata": "5ef84c6a6e762b713ce4015b5b0093a79e672c8e5861c7c31795fae6789b1149"
        },
        "inherit": [],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "initialize(address,uint256,address[],string,string)",
          "applyForMembership()",
          "fetchAllApplicants()",
          "approveApplicants(address[])",
          "proposeCohort(string,uint256,uint256,uint256,bool)",
          "joinCohort(uint256)",
          "getCohorts()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "initialized",
            "src": "contracts/HackerHouseDAO.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "parentAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:9"
            },
            {
              "label": "id",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:10"
            },
            {
              "label": "userId",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Counter)5_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:11"
            },
            {
              "label": "cohortId",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Counter)5_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:12"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:13"
            },
            {
              "label": "descriptionURI",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:14"
            },
            {
              "label": "coreTeam",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:15"
            },
            {
              "label": "membershipPrice",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:16"
            },
            {
              "label": "initialized",
              "offset": 0,
              "slot": "8",
              "type": "t_bool",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:17"
            },
            {
              "label": "users",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(User)478_storage)",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:18"
            },
            {
              "label": "userAddresses",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_address)dyn_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:19"
            },
            {
              "label": "cohorts",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_struct(Cohort)466_storage)",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(User)478_storage)": {
              "label": "mapping(address => struct HackerHouseDAO.User)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Cohort)466_storage)": {
              "label": "mapping(uint256 => struct HackerHouseDAO.Cohort)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Cohort)466_storage": {
              "label": "struct HackerHouseDAO.Cohort",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "trustee",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "nPersons",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slotsReserved",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "amountFunded",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "members",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "pricePerPerson",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "isCreatorSlot",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "10"
                },
                {
                  "label": "isFull",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_struct(Counter)5_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(User)478_storage": {
              "label": "struct HackerHouseDAO.User",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exists",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "userAddr",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "isMember",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "1"
                },
                {
                  "label": "approvers",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "NomadicVault": {
        "src": "contracts/NomadicVault.sol:9",
        "version": {
          "withMetadata": "6130a566b24224fda967c128dcb64dc03ee9eb870885e0ec40beeb092a2fca29",
          "withoutMetadata": "aaf44fce5041e2f278797800873669ba3dcd880d909a9cc6a53702fbc6f7661d",
          "linkedWithoutMetadata": "aaf44fce5041e2f278797800873669ba3dcd880d909a9cc6a53702fbc6f7661d"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Counters",
          "console"
        ],
        "methods": [
          "(address)",
          "proposeShortStay(string,uint256,uint256,uint256,bool)",
          "joinShortStay(uint256)",
          "getShortStays(uint256[])",
          "checkDeadlines()",
          "proposeDAO(string,string,uint256)",
          "getActiveDAOs()",
          "getFormingDAOs()",
          "joinCoreTeam(uint256)",
          "getHackerHouseById(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NomadicVault",
            "src": "contracts/NomadicVault.sol:56"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numOfCoreTeam",
            "src": "contracts/NomadicVault.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "stays",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_struct(ShortStay)1162_storage)",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:40"
            },
            {
              "label": "hhouses",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(HackerHouse)1180_storage)",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:41"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:43"
            },
            {
              "label": "hhTemplate",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:44"
            },
            {
              "label": "hhAddresses",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:45"
            },
            {
              "label": "numOfCoreTeam",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:46"
            },
            {
              "label": "stayId",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Counter)5_storage",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:47"
            },
            {
              "label": "daoId",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(Counter)5_storage",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_struct(HackerHouse)1180_storage)": {
              "label": "mapping(uint256 => struct NomadicVault.HackerHouse)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ShortStay)1162_storage)": {
              "label": "mapping(uint256 => struct NomadicVault.ShortStay)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)5_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(HackerHouse)1180_storage": {
              "label": "struct NomadicVault.HackerHouse",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addr",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "coreTeam",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "coreTeamCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "membershipCost",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(ShortStay)1162_storage": {
              "label": "struct NomadicVault.ShortStay",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "trustee",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "nPersons",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slotsReserved",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "amountFunded",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "members",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "pricePerPerson",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "isCreatorSlot",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "10"
                },
                {
                  "label": "isFull",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "NomadicWorldCoin": {
        "src": "contracts/NomadicWorldCoin.sol:9",
        "version": {
          "withMetadata": "5c2c39c2d2d348af396e0c28aa51218b341422e17f5f019214d8dd34e00d97ed",
          "withoutMetadata": "753c35aaaf91e536bbf4884515b1d3544ea7ebb4a19d364f964a1dd7e0d15942",
          "linkedWithoutMetadata": "753c35aaaf91e536bbf4884515b1d3544ea7ebb4a19d364f964a1dd7e0d15942"
        },
        "inherit": [],
        "libraries": [
          "ByteHasher",
          "SafeMath",
          "Counters"
        ],
        "methods": [
          "(address)",
          "proposeShortStay(string,uint256,uint256,uint256,bool,uint256,uint256,uint256[8])",
          "joinShortStay(uint256)",
          "getShortStays(uint256[])",
          "checkDeadlines()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NomadicWorldCoin",
            "src": "contracts/NomadicWorldCoin.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "worldId",
            "src": "contracts/NomadicWorldCoin.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "groupId",
            "src": "contracts/NomadicWorldCoin.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "groupId",
            "src": "contracts/NomadicWorldCoin.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "nullifierHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:27"
            },
            {
              "label": "stays",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ShortStay)2123_storage)",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:47"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:48"
            },
            {
              "label": "stayId",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Counter)5_storage",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ShortStay)2123_storage)": {
              "label": "mapping(uint256 => struct NomadicWorldCoin.ShortStay)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)5_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ShortStay)2123_storage": {
              "label": "struct NomadicWorldCoin.ShortStay",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "trustee",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "nPersons",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slotsReserved",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "amountFunded",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "members",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "pricePerPerson",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "isCreatorSlot",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "10"
                },
                {
                  "label": "isFull",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ByteHasher": {
        "src": "contracts/helpers/ByteHasher.sol:4",
        "version": {
          "withMetadata": "8c7e55a67ab948819e01e6782776596b4fb1108cbfca927dfe2933de0dd75725",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWorldID": {
        "src": "contracts/interfaces/IWorldID.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(uint256,uint256,uint256,uint256,uint256,uint256[8])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "59f92ec65bbd88d02912ba405296a5a7c26c1fb880faee84220511dd2afb019c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "6358d7652737e83a25bf5fc263c1126d1b768ab8ef883b0b070212b3047ef5c2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "0db76a53041cd1a05babec75dfc03ea844dd92cd1278a69281ee37f6622c28ff",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "HackerHouseDAO": {
        "src": "contracts/HackerHouseDAO.sol:6",
        "version": {
          "withMetadata": "3f6aa10f6eea0aaebba632362b2cf5b37aa034019318575e12decfb1450e8ed4",
          "withoutMetadata": "5ef84c6a6e762b713ce4015b5b0093a79e672c8e5861c7c31795fae6789b1149",
          "linkedWithoutMetadata": "5ef84c6a6e762b713ce4015b5b0093a79e672c8e5861c7c31795fae6789b1149"
        },
        "inherit": [],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "initialize(address,uint256,address[],string,string)",
          "applyForMembership()",
          "fetchAllApplicants()",
          "approveApplicants(address[])",
          "proposeCohort(string,uint256,uint256,uint256,bool)",
          "joinCohort(uint256)",
          "getCohorts()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "initialized",
            "src": "contracts/HackerHouseDAO.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "parentAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:9"
            },
            {
              "label": "id",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:10"
            },
            {
              "label": "userId",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Counter)5_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:11"
            },
            {
              "label": "cohortId",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Counter)5_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:12"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:13"
            },
            {
              "label": "descriptionURI",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:14"
            },
            {
              "label": "coreTeam",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:15"
            },
            {
              "label": "membershipPrice",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:16"
            },
            {
              "label": "initialized",
              "offset": 0,
              "slot": "8",
              "type": "t_bool",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:17"
            },
            {
              "label": "users",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(User)478_storage)",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:18"
            },
            {
              "label": "userAddresses",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_address)dyn_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:19"
            },
            {
              "label": "cohorts",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_struct(Cohort)466_storage)",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(User)478_storage)": {
              "label": "mapping(address => struct HackerHouseDAO.User)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Cohort)466_storage)": {
              "label": "mapping(uint256 => struct HackerHouseDAO.Cohort)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Cohort)466_storage": {
              "label": "struct HackerHouseDAO.Cohort",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "trustee",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "nPersons",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slotsReserved",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "amountFunded",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "members",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "pricePerPerson",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "isCreatorSlot",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "10"
                },
                {
                  "label": "isFull",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_struct(Counter)5_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(User)478_storage": {
              "label": "struct HackerHouseDAO.User",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exists",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "userAddr",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "isMember",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "1"
                },
                {
                  "label": "approvers",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "NomadicVault": {
        "src": "contracts/NomadicVault.sol:9",
        "version": {
          "withMetadata": "3d9ca1dec0ca317a600d20ce0ae2220916630fdda2aca23f0ff9fd04e167cd7e",
          "withoutMetadata": "aaf44fce5041e2f278797800873669ba3dcd880d909a9cc6a53702fbc6f7661d",
          "linkedWithoutMetadata": "aaf44fce5041e2f278797800873669ba3dcd880d909a9cc6a53702fbc6f7661d"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Counters",
          "console"
        ],
        "methods": [
          "(address)",
          "proposeShortStay(string,uint256,uint256,uint256,bool)",
          "joinShortStay(uint256)",
          "getShortStays(uint256[])",
          "checkDeadlines()",
          "proposeDAO(string,string,uint256)",
          "getActiveDAOs()",
          "getFormingDAOs()",
          "joinCoreTeam(uint256)",
          "getHackerHouseById(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NomadicVault",
            "src": "contracts/NomadicVault.sol:56"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numOfCoreTeam",
            "src": "contracts/NomadicVault.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "stays",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_struct(ShortStay)1162_storage)",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:40"
            },
            {
              "label": "hhouses",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(HackerHouse)1180_storage)",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:41"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:43"
            },
            {
              "label": "hhTemplate",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:44"
            },
            {
              "label": "hhAddresses",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:45"
            },
            {
              "label": "numOfCoreTeam",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:46"
            },
            {
              "label": "stayId",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Counter)5_storage",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:47"
            },
            {
              "label": "daoId",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(Counter)5_storage",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_struct(HackerHouse)1180_storage)": {
              "label": "mapping(uint256 => struct NomadicVault.HackerHouse)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ShortStay)1162_storage)": {
              "label": "mapping(uint256 => struct NomadicVault.ShortStay)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)5_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(HackerHouse)1180_storage": {
              "label": "struct NomadicVault.HackerHouse",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addr",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "coreTeam",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "coreTeamCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "membershipCost",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(ShortStay)1162_storage": {
              "label": "struct NomadicVault.ShortStay",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "trustee",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "nPersons",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slotsReserved",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "amountFunded",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "members",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "pricePerPerson",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "isCreatorSlot",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "10"
                },
                {
                  "label": "isFull",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "NomadicWorldCoin": {
        "src": "contracts/NomadicWorldCoin.sol:9",
        "version": {
          "withMetadata": "5c2c39c2d2d348af396e0c28aa51218b341422e17f5f019214d8dd34e00d97ed",
          "withoutMetadata": "753c35aaaf91e536bbf4884515b1d3544ea7ebb4a19d364f964a1dd7e0d15942",
          "linkedWithoutMetadata": "753c35aaaf91e536bbf4884515b1d3544ea7ebb4a19d364f964a1dd7e0d15942"
        },
        "inherit": [],
        "libraries": [
          "ByteHasher",
          "SafeMath",
          "Counters"
        ],
        "methods": [
          "(address)",
          "proposeShortStay(string,uint256,uint256,uint256,bool,uint256,uint256,uint256[8])",
          "joinShortStay(uint256)",
          "getShortStays(uint256[])",
          "checkDeadlines()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NomadicWorldCoin",
            "src": "contracts/NomadicWorldCoin.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "worldId",
            "src": "contracts/NomadicWorldCoin.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "groupId",
            "src": "contracts/NomadicWorldCoin.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "groupId",
            "src": "contracts/NomadicWorldCoin.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "nullifierHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:27"
            },
            {
              "label": "stays",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ShortStay)2123_storage)",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:47"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:48"
            },
            {
              "label": "stayId",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Counter)5_storage",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ShortStay)2123_storage)": {
              "label": "mapping(uint256 => struct NomadicWorldCoin.ShortStay)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)5_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ShortStay)2123_storage": {
              "label": "struct NomadicWorldCoin.ShortStay",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "trustee",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "nPersons",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slotsReserved",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "amountFunded",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "members",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "pricePerPerson",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "isCreatorSlot",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "10"
                },
                {
                  "label": "isFull",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ByteHasher": {
        "src": "contracts/helpers/ByteHasher.sol:4",
        "version": {
          "withMetadata": "8c7e55a67ab948819e01e6782776596b4fb1108cbfca927dfe2933de0dd75725",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWorldID": {
        "src": "contracts/interfaces/IWorldID.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(uint256,uint256,uint256,uint256,uint256,uint256[8])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "59f92ec65bbd88d02912ba405296a5a7c26c1fb880faee84220511dd2afb019c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "6358d7652737e83a25bf5fc263c1126d1b768ab8ef883b0b070212b3047ef5c2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "0db76a53041cd1a05babec75dfc03ea844dd92cd1278a69281ee37f6622c28ff",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "HackerHouseDAO": {
        "src": "contracts/HackerHouseDAO.sol:6",
        "version": {
          "withMetadata": "3f6aa10f6eea0aaebba632362b2cf5b37aa034019318575e12decfb1450e8ed4",
          "withoutMetadata": "5ef84c6a6e762b713ce4015b5b0093a79e672c8e5861c7c31795fae6789b1149",
          "linkedWithoutMetadata": "5ef84c6a6e762b713ce4015b5b0093a79e672c8e5861c7c31795fae6789b1149"
        },
        "inherit": [],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "initialize(address,uint256,address[],string,string)",
          "applyForMembership()",
          "fetchAllApplicants()",
          "approveApplicants(address[])",
          "proposeCohort(string,uint256,uint256,uint256,bool)",
          "joinCohort(uint256)",
          "getCohorts()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "initialized",
            "src": "contracts/HackerHouseDAO.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "parentAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:9"
            },
            {
              "label": "id",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:10"
            },
            {
              "label": "userId",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Counter)5_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:11"
            },
            {
              "label": "cohortId",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Counter)5_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:12"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:13"
            },
            {
              "label": "descriptionURI",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:14"
            },
            {
              "label": "coreTeam",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:15"
            },
            {
              "label": "membershipPrice",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:16"
            },
            {
              "label": "initialized",
              "offset": 0,
              "slot": "8",
              "type": "t_bool",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:17"
            },
            {
              "label": "users",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(User)478_storage)",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:18"
            },
            {
              "label": "userAddresses",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_address)dyn_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:19"
            },
            {
              "label": "cohorts",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_struct(Cohort)466_storage)",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(User)478_storage)": {
              "label": "mapping(address => struct HackerHouseDAO.User)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Cohort)466_storage)": {
              "label": "mapping(uint256 => struct HackerHouseDAO.Cohort)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Cohort)466_storage": {
              "label": "struct HackerHouseDAO.Cohort",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "trustee",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "nPersons",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slotsReserved",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "amountFunded",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "members",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "pricePerPerson",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "isCreatorSlot",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "10"
                },
                {
                  "label": "isFull",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_struct(Counter)5_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(User)478_storage": {
              "label": "struct HackerHouseDAO.User",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exists",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "userAddr",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "isMember",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "1"
                },
                {
                  "label": "approvers",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "NomadicVault": {
        "src": "contracts/NomadicVault.sol:9",
        "version": {
          "withMetadata": "91bbc9f0a38eeb23fdd2920599b90bb28c6bcb3841bb3d9b9fb9a22102913711",
          "withoutMetadata": "6ba708b54b1617fc53fb74d835bc7b1d22fda92ff9527fefdbf6a01f7bbb22a4",
          "linkedWithoutMetadata": "6ba708b54b1617fc53fb74d835bc7b1d22fda92ff9527fefdbf6a01f7bbb22a4"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Counters",
          "console"
        ],
        "methods": [
          "(address)",
          "proposeShortStay(string,uint256,uint256,uint256,bool)",
          "joinShortStay(uint256)",
          "getShortStays(uint256[])",
          "checkDeadlines()",
          "proposeDAO(string,string,uint256)",
          "getActiveDAOs()",
          "getFormingDAOs()",
          "joinCoreTeam(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NomadicVault",
            "src": "contracts/NomadicVault.sol:56"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numOfCoreTeam",
            "src": "contracts/NomadicVault.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "stays",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_struct(ShortStay)1162_storage)",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:40"
            },
            {
              "label": "hhouses",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(HackerHouse)1180_storage)",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:41"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:43"
            },
            {
              "label": "hhTemplate",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:44"
            },
            {
              "label": "hhAddresses",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:45"
            },
            {
              "label": "numOfCoreTeam",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:46"
            },
            {
              "label": "stayId",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Counter)5_storage",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:47"
            },
            {
              "label": "daoId",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(Counter)5_storage",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_struct(HackerHouse)1180_storage)": {
              "label": "mapping(uint256 => struct NomadicVault.HackerHouse)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ShortStay)1162_storage)": {
              "label": "mapping(uint256 => struct NomadicVault.ShortStay)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)5_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(HackerHouse)1180_storage": {
              "label": "struct NomadicVault.HackerHouse",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addr",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "coreTeam",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "coreTeamCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "membershipCost",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(ShortStay)1162_storage": {
              "label": "struct NomadicVault.ShortStay",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "trustee",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "nPersons",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slotsReserved",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "amountFunded",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "members",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "pricePerPerson",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "isCreatorSlot",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "10"
                },
                {
                  "label": "isFull",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "NomadicWorldCoin": {
        "src": "contracts/NomadicWorldCoin.sol:9",
        "version": {
          "withMetadata": "5c2c39c2d2d348af396e0c28aa51218b341422e17f5f019214d8dd34e00d97ed",
          "withoutMetadata": "753c35aaaf91e536bbf4884515b1d3544ea7ebb4a19d364f964a1dd7e0d15942",
          "linkedWithoutMetadata": "753c35aaaf91e536bbf4884515b1d3544ea7ebb4a19d364f964a1dd7e0d15942"
        },
        "inherit": [],
        "libraries": [
          "ByteHasher",
          "SafeMath",
          "Counters"
        ],
        "methods": [
          "(address)",
          "proposeShortStay(string,uint256,uint256,uint256,bool,uint256,uint256,uint256[8])",
          "joinShortStay(uint256)",
          "getShortStays(uint256[])",
          "checkDeadlines()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NomadicWorldCoin",
            "src": "contracts/NomadicWorldCoin.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "worldId",
            "src": "contracts/NomadicWorldCoin.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "groupId",
            "src": "contracts/NomadicWorldCoin.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "groupId",
            "src": "contracts/NomadicWorldCoin.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "nullifierHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:27"
            },
            {
              "label": "stays",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ShortStay)2110_storage)",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:47"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:48"
            },
            {
              "label": "stayId",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Counter)5_storage",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ShortStay)2110_storage)": {
              "label": "mapping(uint256 => struct NomadicWorldCoin.ShortStay)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)5_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ShortStay)2110_storage": {
              "label": "struct NomadicWorldCoin.ShortStay",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "trustee",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "nPersons",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slotsReserved",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "amountFunded",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "members",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "pricePerPerson",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "isCreatorSlot",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "10"
                },
                {
                  "label": "isFull",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ByteHasher": {
        "src": "contracts/helpers/ByteHasher.sol:4",
        "version": {
          "withMetadata": "8c7e55a67ab948819e01e6782776596b4fb1108cbfca927dfe2933de0dd75725",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWorldID": {
        "src": "contracts/interfaces/IWorldID.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(uint256,uint256,uint256,uint256,uint256,uint256[8])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "59f92ec65bbd88d02912ba405296a5a7c26c1fb880faee84220511dd2afb019c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "6358d7652737e83a25bf5fc263c1126d1b768ab8ef883b0b070212b3047ef5c2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "0db76a53041cd1a05babec75dfc03ea844dd92cd1278a69281ee37f6622c28ff",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "HackerHouseDAO": {
        "src": "contracts/HackerHouseDAO.sol:6",
        "version": {
          "withMetadata": "3f6aa10f6eea0aaebba632362b2cf5b37aa034019318575e12decfb1450e8ed4",
          "withoutMetadata": "5ef84c6a6e762b713ce4015b5b0093a79e672c8e5861c7c31795fae6789b1149",
          "linkedWithoutMetadata": "5ef84c6a6e762b713ce4015b5b0093a79e672c8e5861c7c31795fae6789b1149"
        },
        "inherit": [],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "initialize(address,uint256,address[],string,string)",
          "applyForMembership()",
          "fetchAllApplicants()",
          "approveApplicants(address[])",
          "proposeCohort(string,uint256,uint256,uint256,bool)",
          "joinCohort(uint256)",
          "getCohorts()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "initialized",
            "src": "contracts/HackerHouseDAO.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "parentAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:9"
            },
            {
              "label": "id",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:10"
            },
            {
              "label": "userId",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Counter)5_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:11"
            },
            {
              "label": "cohortId",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Counter)5_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:12"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:13"
            },
            {
              "label": "descriptionURI",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:14"
            },
            {
              "label": "coreTeam",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:15"
            },
            {
              "label": "membershipPrice",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:16"
            },
            {
              "label": "initialized",
              "offset": 0,
              "slot": "8",
              "type": "t_bool",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:17"
            },
            {
              "label": "users",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(User)478_storage)",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:18"
            },
            {
              "label": "userAddresses",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_address)dyn_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:19"
            },
            {
              "label": "cohorts",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_struct(Cohort)466_storage)",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(User)478_storage)": {
              "label": "mapping(address => struct HackerHouseDAO.User)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Cohort)466_storage)": {
              "label": "mapping(uint256 => struct HackerHouseDAO.Cohort)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Cohort)466_storage": {
              "label": "struct HackerHouseDAO.Cohort",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "trustee",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "nPersons",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slotsReserved",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "amountFunded",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "members",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "pricePerPerson",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "isCreatorSlot",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "10"
                },
                {
                  "label": "isFull",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_struct(Counter)5_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(User)478_storage": {
              "label": "struct HackerHouseDAO.User",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exists",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "userAddr",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "isMember",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "1"
                },
                {
                  "label": "approvers",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "NomadicVault": {
        "src": "contracts/NomadicVault.sol:9",
        "version": {
          "withMetadata": "345b4cdbe679692fb651e6d46b7b8b5a626cb8795d7c82f7a2856f848521a54e",
          "withoutMetadata": "ec04a8c373d84793e05248023350e25ac1433087d939c93d8bedcd39d670dbab",
          "linkedWithoutMetadata": "ec04a8c373d84793e05248023350e25ac1433087d939c93d8bedcd39d670dbab"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Counters",
          "console"
        ],
        "methods": [
          "(address)",
          "proposeShortStay(string,uint256,uint256,uint256,bool)",
          "joinShortStay(uint256)",
          "getShortStays(uint256[])",
          "checkDeadlines()",
          "proposeDAO(string,string,uint256)",
          "getActiveDAOs()",
          "getFormingDAOs()",
          "joinCoreTeam(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NomadicVault",
            "src": "contracts/NomadicVault.sol:55"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numOfCoreTeam",
            "src": "contracts/NomadicVault.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "stays",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_struct(ShortStay)1162_storage)",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:39"
            },
            {
              "label": "hhouses",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(HackerHouse)1178_storage)",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:40"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:42"
            },
            {
              "label": "hhTemplate",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:43"
            },
            {
              "label": "hhAddresses",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:44"
            },
            {
              "label": "numOfCoreTeam",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:45"
            },
            {
              "label": "stayId",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Counter)5_storage",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:46"
            },
            {
              "label": "daoId",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(Counter)5_storage",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_struct(HackerHouse)1178_storage)": {
              "label": "mapping(uint256 => struct NomadicVault.HackerHouse)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ShortStay)1162_storage)": {
              "label": "mapping(uint256 => struct NomadicVault.ShortStay)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)5_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(HackerHouse)1178_storage": {
              "label": "struct NomadicVault.HackerHouse",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addr",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "coreTeam",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "coreTeamCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(ShortStay)1162_storage": {
              "label": "struct NomadicVault.ShortStay",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "trustee",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "nPersons",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slotsReserved",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "amountFunded",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "members",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "pricePerPerson",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "isCreatorSlot",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "10"
                },
                {
                  "label": "isFull",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "NomadicWorldCoin": {
        "src": "contracts/NomadicWorldCoin.sol:9",
        "version": {
          "withMetadata": "5c2c39c2d2d348af396e0c28aa51218b341422e17f5f019214d8dd34e00d97ed",
          "withoutMetadata": "753c35aaaf91e536bbf4884515b1d3544ea7ebb4a19d364f964a1dd7e0d15942",
          "linkedWithoutMetadata": "753c35aaaf91e536bbf4884515b1d3544ea7ebb4a19d364f964a1dd7e0d15942"
        },
        "inherit": [],
        "libraries": [
          "ByteHasher",
          "SafeMath",
          "Counters"
        ],
        "methods": [
          "(address)",
          "proposeShortStay(string,uint256,uint256,uint256,bool,uint256,uint256,uint256[8])",
          "joinShortStay(uint256)",
          "getShortStays(uint256[])",
          "checkDeadlines()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NomadicWorldCoin",
            "src": "contracts/NomadicWorldCoin.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "worldId",
            "src": "contracts/NomadicWorldCoin.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "groupId",
            "src": "contracts/NomadicWorldCoin.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "groupId",
            "src": "contracts/NomadicWorldCoin.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "nullifierHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:27"
            },
            {
              "label": "stays",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ShortStay)2107_storage)",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:47"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:48"
            },
            {
              "label": "stayId",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Counter)5_storage",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ShortStay)2107_storage)": {
              "label": "mapping(uint256 => struct NomadicWorldCoin.ShortStay)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)5_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ShortStay)2107_storage": {
              "label": "struct NomadicWorldCoin.ShortStay",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "trustee",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "nPersons",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slotsReserved",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "amountFunded",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "members",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "pricePerPerson",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "isCreatorSlot",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "10"
                },
                {
                  "label": "isFull",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ByteHasher": {
        "src": "contracts/helpers/ByteHasher.sol:4",
        "version": {
          "withMetadata": "8c7e55a67ab948819e01e6782776596b4fb1108cbfca927dfe2933de0dd75725",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWorldID": {
        "src": "contracts/interfaces/IWorldID.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(uint256,uint256,uint256,uint256,uint256,uint256[8])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "59f92ec65bbd88d02912ba405296a5a7c26c1fb880faee84220511dd2afb019c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "6358d7652737e83a25bf5fc263c1126d1b768ab8ef883b0b070212b3047ef5c2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "0db76a53041cd1a05babec75dfc03ea844dd92cd1278a69281ee37f6622c28ff",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "HackerHouseDAO": {
        "src": "contracts/HackerHouseDAO.sol:6",
        "version": {
          "withMetadata": "ebf1358878a0e69de09c5aba935289296b85c7baeb48dbccf9058b6396806c63",
          "withoutMetadata": "53d6e2e18a373f491389f71753c134de0abec8f84485fdc6119a40497199f597",
          "linkedWithoutMetadata": "53d6e2e18a373f491389f71753c134de0abec8f84485fdc6119a40497199f597"
        },
        "inherit": [],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "initialize(address,uint256,address[],string,string)",
          "applyForMembership()",
          "fetchAllApplicants()",
          "approveApplicants(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "initialized",
            "src": "contracts/HackerHouseDAO.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "parentAddress",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:9"
            },
            {
              "label": "id",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:10"
            },
            {
              "label": "userId",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Counter)5_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:11"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:12"
            },
            {
              "label": "descriptionURI",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:13"
            },
            {
              "label": "coreTeam",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_address)dyn_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:14"
            },
            {
              "label": "membershipPrice",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:15"
            },
            {
              "label": "initialized",
              "offset": 0,
              "slot": "7",
              "type": "t_bool",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:16"
            },
            {
              "label": "users",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(User)431_storage)",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:17"
            },
            {
              "label": "userAddresses",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_address)dyn_storage",
              "contract": "HackerHouseDAO",
              "src": "contracts/HackerHouseDAO.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(User)431_storage)": {
              "label": "mapping(address => struct HackerHouseDAO.User)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)5_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(User)431_storage": {
              "label": "struct HackerHouseDAO.User",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exists",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "userAddr",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "isMember",
                  "type": "t_bool",
                  "offset": 21,
                  "slot": "1"
                },
                {
                  "label": "approvers",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "NomadicVault": {
        "src": "contracts/NomadicVault.sol:9",
        "version": {
          "withMetadata": "fa8b0f6e662799f280cb9ab394995772fba2f7e69690c2209c39def8654a17ea",
          "withoutMetadata": "af797ffe62fd20a0ab4d2cfaf48a8372ac21194846baf090f954a62dc8c5bd2c",
          "linkedWithoutMetadata": "af797ffe62fd20a0ab4d2cfaf48a8372ac21194846baf090f954a62dc8c5bd2c"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Counters",
          "console"
        ],
        "methods": [
          "(address)",
          "proposeShortStay(string,uint256,uint256,uint256,bool)",
          "joinShortStay(uint256)",
          "getShortStays(uint256[])",
          "checkDeadlines()",
          "proposeDAO(string,string,uint256)",
          "getActiveDAOs()",
          "getFormingDAOs()",
          "joinCoreTeam(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NomadicVault",
            "src": "contracts/NomadicVault.sol:55"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numOfCoreTeam",
            "src": "contracts/NomadicVault.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "stays",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_struct(ShortStay)803_storage)",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:39"
            },
            {
              "label": "hhouses",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(HackerHouse)819_storage)",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:40"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:42"
            },
            {
              "label": "hhTemplate",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:43"
            },
            {
              "label": "hhAddresses",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:44"
            },
            {
              "label": "numOfCoreTeam",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:45"
            },
            {
              "label": "stayId",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Counter)5_storage",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:46"
            },
            {
              "label": "daoId",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(Counter)5_storage",
              "contract": "NomadicVault",
              "src": "contracts/NomadicVault.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_struct(HackerHouse)819_storage)": {
              "label": "mapping(uint256 => struct NomadicVault.HackerHouse)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ShortStay)803_storage)": {
              "label": "mapping(uint256 => struct NomadicVault.ShortStay)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)5_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(HackerHouse)819_storage": {
              "label": "struct NomadicVault.HackerHouse",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "addr",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "coreTeam",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "coreTeamCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(ShortStay)803_storage": {
              "label": "struct NomadicVault.ShortStay",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "trustee",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "nPersons",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slotsReserved",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "amountFunded",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "members",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "pricePerPerson",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "isCreatorSlot",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "10"
                },
                {
                  "label": "isFull",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "NomadicWorldCoin": {
        "src": "contracts/NomadicWorldCoin.sol:9",
        "version": {
          "withMetadata": "5c2c39c2d2d348af396e0c28aa51218b341422e17f5f019214d8dd34e00d97ed",
          "withoutMetadata": "753c35aaaf91e536bbf4884515b1d3544ea7ebb4a19d364f964a1dd7e0d15942",
          "linkedWithoutMetadata": "753c35aaaf91e536bbf4884515b1d3544ea7ebb4a19d364f964a1dd7e0d15942"
        },
        "inherit": [],
        "libraries": [
          "ByteHasher",
          "SafeMath",
          "Counters"
        ],
        "methods": [
          "(address)",
          "proposeShortStay(string,uint256,uint256,uint256,bool,uint256,uint256,uint256[8])",
          "joinShortStay(uint256)",
          "getShortStays(uint256[])",
          "checkDeadlines()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NomadicWorldCoin",
            "src": "contracts/NomadicWorldCoin.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "worldId",
            "src": "contracts/NomadicWorldCoin.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "groupId",
            "src": "contracts/NomadicWorldCoin.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "groupId",
            "src": "contracts/NomadicWorldCoin.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "nullifierHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:27"
            },
            {
              "label": "stays",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ShortStay)1711_storage)",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:47"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:48"
            },
            {
              "label": "stayId",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Counter)5_storage",
              "contract": "NomadicWorldCoin",
              "src": "contracts/NomadicWorldCoin.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ShortStay)1711_storage)": {
              "label": "mapping(uint256 => struct NomadicWorldCoin.ShortStay)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)5_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ShortStay)1711_storage": {
              "label": "struct NomadicWorldCoin.ShortStay",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "descriptionURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "trustee",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "nPersons",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "slotsReserved",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "amountFunded",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "members",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "totalPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "pricePerPerson",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "isCreatorSlot",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "10"
                },
                {
                  "label": "isFull",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ByteHasher": {
        "src": "contracts/helpers/ByteHasher.sol:4",
        "version": {
          "withMetadata": "8c7e55a67ab948819e01e6782776596b4fb1108cbfca927dfe2933de0dd75725",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IWorldID": {
        "src": "contracts/interfaces/IWorldID.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(uint256,uint256,uint256,uint256,uint256,uint256[8])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "59f92ec65bbd88d02912ba405296a5a7c26c1fb880faee84220511dd2afb019c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b35fba2ee6479f0ec36ad880500874423e65c0eb3c0bb1fada1e750a802da78d",
          "withoutMetadata": "38634e864a2963beb8b66fed05b47823757e57f102fa1d97815f4e8be2405c5a",
          "linkedWithoutMetadata": "38634e864a2963beb8b66fed05b47823757e57f102fa1d97815f4e8be2405c5a"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "e3e0ea3b37dd0a532fb3d3dd4563c03b469a827d02d9027bb93f5be0eea2dffe",
          "withoutMetadata": "1d91c28280d9f2dd0f0ad5fad4eed9dd79a060fea39975dd99f2839160b91411",
          "linkedWithoutMetadata": "1d91c28280d9f2dd0f0ad5fad4eed9dd79a060fea39975dd99f2839160b91411"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "c14e740e5948185e46262620d3426425af20df495a7326a7a6a67ccc97946cc4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "32c201d18bed9a97283017f99c308f5cea36031220935cd06b2b3430576c888b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DummyToken": {
        "src": "contracts/DummyToken.sol:7",
        "version": {
          "withMetadata": "76759ba41383f0b157e4bc013315390d9e0251cad7f2f1492a2990e8bb8d85da",
          "withoutMetadata": "a25719c6642c31e649e11fc2402abde82ddf442ce5eed12ff5bec4bdb611a2d2",
          "linkedWithoutMetadata": "a25719c6642c31e649e11fc2402abde82ddf442ce5eed12ff5bec4bdb611a2d2"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setPriceFeed(address)",
          "getPrice()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DummyToken",
            "src": "contracts/DummyToken.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "owner",
            "src": "contracts/DummyToken.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "DummyToken",
              "src": "contracts/DummyToken.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ProfileNFT": {
        "src": "contracts/ProfileNFT.sol:6",
        "version": {
          "withMetadata": "b59e5dfddfdf8dfe9c1f77810c3a5c8521c2cecfc49bb35f34a5af3bd9473cf7",
          "withoutMetadata": "453cc739cee6ab5b495b792b38ac70b42c3af6ac8032cadee6777366405ff22c",
          "linkedWithoutMetadata": "453cc739cee6ab5b495b792b38ac70b42c3af6ac8032cadee6777366405ff22c"
        },
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address)",
          "setBadge(address,string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProfileNFT",
            "src": "contracts/ProfileNFT.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "ProfileNFT",
              "src": "contracts/ProfileNFT.sol:7"
            },
            {
              "label": "badges",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_string_storage)",
              "contract": "ProfileNFT",
              "src": "contracts/ProfileNFT.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_string_storage)": {
              "label": "mapping(address => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MockChainlinkOracleFeed": {
        "src": "contracts/mock/MockChainlinkOracleFeed.sol:6",
        "version": {
          "withMetadata": "40e06de4ad48f84ddcc02fa729e8e131a9ca2fbfa3c0afa535ec69d271bca346",
          "withoutMetadata": "8fc8a025568ab8db808b99420de5a2ecb306b5163ff319ce77d0dc136f1e1f01",
          "linkedWithoutMetadata": "8fc8a025568ab8db808b99420de5a2ecb306b5163ff319ce77d0dc136f1e1f01"
        },
        "inherit": [
          "AggregatorV3Interface"
        ],
        "libraries": [],
        "methods": [
          "(int256,uint8)",
          "decimals()",
          "description()",
          "version()",
          "setPrice(int256)",
          "setDecimals(uint8)",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockChainlinkOracleFeed",
            "src": "contracts/mock/MockChainlinkOracleFeed.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "price",
              "offset": 0,
              "slot": "0",
              "type": "t_int256",
              "contract": "MockChainlinkOracleFeed",
              "src": "contracts/mock/MockChainlinkOracleFeed.sol:7"
            },
            {
              "label": "numDecimals",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "MockChainlinkOracleFeed",
              "src": "contracts/mock/MockChainlinkOracleFeed.sol:8"
            }
          ],
          "types": {
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "UserRegistry": {
        "src": "contracts/UserRegistry.sol:3",
        "version": {
          "withMetadata": "d40b294f1ead8167d740ca911c5cde219095703686d89e02d99609a1e16c774e",
          "withoutMetadata": "b30a93cef89e5d27b17fc06b7db26c93013a621b0a8cef54a656705eb596ca60",
          "linkedWithoutMetadata": "b30a93cef89e5d27b17fc06b7db26c93013a621b0a8cef54a656705eb596ca60"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getUserByAddress()",
          "modifyUser(string,string,uint256)",
          "getRandom()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserRegistry",
            "src": "contracts/UserRegistry.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "owner",
            "src": "contracts/UserRegistry.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "userCount",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "UserRegistry",
              "src": "contracts/UserRegistry.sol:4"
            },
            {
              "label": "userByAddress",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(User)14_storage)",
              "contract": "UserRegistry",
              "src": "contracts/UserRegistry.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(User)14_storage)": {
              "label": "mapping(address => struct UserRegistry.User)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(User)14_storage": {
              "label": "struct UserRegistry.User",
              "members": [
                {
                  "label": "url",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "involvementBasis",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "imgType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "KeeperBase": {
        "src": "@chainlink/contracts/src/v0.8/KeeperBase.sol:4",
        "version": {
          "withMetadata": "706ab9b378a66d6014873a4ff72b96ec88d933ab0f508457a6834736247c9de9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "KeeperCompatible": {
        "src": "@chainlink/contracts/src/v0.8/KeeperCompatible.sol:7",
        "inherit": [
          "KeeperCompatibleInterface",
          "KeeperBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "KeeperCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "NomadicKeeper": {
        "src": "contracts/NomadicKeeper.sol:6",
        "version": {
          "withMetadata": "65f29c3316b8aaa0776bcc69bc57aade8a702dfa7ab4f08030c99c5d9992d450",
          "withoutMetadata": "2f527048a256c2190082822603321222cb5736b6265680cfb973d9e017d470e4",
          "linkedWithoutMetadata": "2f527048a256c2190082822603321222cb5736b6265680cfb973d9e017d470e4"
        },
        "inherit": [
          "KeeperCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "setConfig(bytes32)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NomadicKeeper",
            "src": "contracts/NomadicKeeper.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "lastRunDay",
            "src": "contracts/NomadicKeeper.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "vault",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "NomadicKeeper",
              "src": "contracts/NomadicKeeper.sol:9"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "NomadicKeeper",
              "src": "contracts/NomadicKeeper.sol:10"
            },
            {
              "label": "lastRunDay",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NomadicKeeper",
              "src": "contracts/NomadicKeeper.sol:11"
            },
            {
              "label": "config",
              "offset": 0,
              "slot": "3",
              "type": "t_bytes32",
              "contract": "NomadicKeeper",
              "src": "contracts/NomadicKeeper.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b35fba2ee6479f0ec36ad880500874423e65c0eb3c0bb1fada1e750a802da78d",
          "withoutMetadata": "38634e864a2963beb8b66fed05b47823757e57f102fa1d97815f4e8be2405c5a",
          "linkedWithoutMetadata": "38634e864a2963beb8b66fed05b47823757e57f102fa1d97815f4e8be2405c5a"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "e3e0ea3b37dd0a532fb3d3dd4563c03b469a827d02d9027bb93f5be0eea2dffe",
          "withoutMetadata": "1d91c28280d9f2dd0f0ad5fad4eed9dd79a060fea39975dd99f2839160b91411",
          "linkedWithoutMetadata": "1d91c28280d9f2dd0f0ad5fad4eed9dd79a060fea39975dd99f2839160b91411"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "c14e740e5948185e46262620d3426425af20df495a7326a7a6a67ccc97946cc4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "32c201d18bed9a97283017f99c308f5cea36031220935cd06b2b3430576c888b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DummyToken": {
        "src": "contracts/DummyToken.sol:7",
        "version": {
          "withMetadata": "76759ba41383f0b157e4bc013315390d9e0251cad7f2f1492a2990e8bb8d85da",
          "withoutMetadata": "a25719c6642c31e649e11fc2402abde82ddf442ce5eed12ff5bec4bdb611a2d2",
          "linkedWithoutMetadata": "a25719c6642c31e649e11fc2402abde82ddf442ce5eed12ff5bec4bdb611a2d2"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setPriceFeed(address)",
          "getPrice()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DummyToken",
            "src": "contracts/DummyToken.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "owner",
            "src": "contracts/DummyToken.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "DummyToken",
              "src": "contracts/DummyToken.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ProfileNFT": {
        "src": "contracts/ProfileNFT.sol:6",
        "version": {
          "withMetadata": "b59e5dfddfdf8dfe9c1f77810c3a5c8521c2cecfc49bb35f34a5af3bd9473cf7",
          "withoutMetadata": "453cc739cee6ab5b495b792b38ac70b42c3af6ac8032cadee6777366405ff22c",
          "linkedWithoutMetadata": "453cc739cee6ab5b495b792b38ac70b42c3af6ac8032cadee6777366405ff22c"
        },
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address)",
          "setBadge(address,string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProfileNFT",
            "src": "contracts/ProfileNFT.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "ProfileNFT",
              "src": "contracts/ProfileNFT.sol:7"
            },
            {
              "label": "badges",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_string_storage)",
              "contract": "ProfileNFT",
              "src": "contracts/ProfileNFT.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_string_storage)": {
              "label": "mapping(address => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MockChainlinkOracleFeed": {
        "src": "contracts/mock/MockChainlinkOracleFeed.sol:6",
        "version": {
          "withMetadata": "40e06de4ad48f84ddcc02fa729e8e131a9ca2fbfa3c0afa535ec69d271bca346",
          "withoutMetadata": "8fc8a025568ab8db808b99420de5a2ecb306b5163ff319ce77d0dc136f1e1f01",
          "linkedWithoutMetadata": "8fc8a025568ab8db808b99420de5a2ecb306b5163ff319ce77d0dc136f1e1f01"
        },
        "inherit": [
          "AggregatorV3Interface"
        ],
        "libraries": [],
        "methods": [
          "(int256,uint8)",
          "decimals()",
          "description()",
          "version()",
          "setPrice(int256)",
          "setDecimals(uint8)",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockChainlinkOracleFeed",
            "src": "contracts/mock/MockChainlinkOracleFeed.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "price",
              "offset": 0,
              "slot": "0",
              "type": "t_int256",
              "contract": "MockChainlinkOracleFeed",
              "src": "contracts/mock/MockChainlinkOracleFeed.sol:7"
            },
            {
              "label": "numDecimals",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "MockChainlinkOracleFeed",
              "src": "contracts/mock/MockChainlinkOracleFeed.sol:8"
            }
          ],
          "types": {
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "KeeperBase": {
        "src": "@chainlink/contracts/src/v0.8/KeeperBase.sol:4",
        "version": {
          "withMetadata": "706ab9b378a66d6014873a4ff72b96ec88d933ab0f508457a6834736247c9de9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "KeeperCompatible": {
        "src": "@chainlink/contracts/src/v0.8/KeeperCompatible.sol:7",
        "inherit": [
          "KeeperCompatibleInterface",
          "KeeperBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "KeeperCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "NomadicKeeper": {
        "src": "contracts/NomadicKeeper.sol:6",
        "version": {
          "withMetadata": "65f29c3316b8aaa0776bcc69bc57aade8a702dfa7ab4f08030c99c5d9992d450",
          "withoutMetadata": "2f527048a256c2190082822603321222cb5736b6265680cfb973d9e017d470e4",
          "linkedWithoutMetadata": "2f527048a256c2190082822603321222cb5736b6265680cfb973d9e017d470e4"
        },
        "inherit": [
          "KeeperCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "setConfig(bytes32)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NomadicKeeper",
            "src": "contracts/NomadicKeeper.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "lastRunDay",
            "src": "contracts/NomadicKeeper.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "vault",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "NomadicKeeper",
              "src": "contracts/NomadicKeeper.sol:9"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "NomadicKeeper",
              "src": "contracts/NomadicKeeper.sol:10"
            },
            {
              "label": "lastRunDay",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NomadicKeeper",
              "src": "contracts/NomadicKeeper.sol:11"
            },
            {
              "label": "config",
              "offset": 0,
              "slot": "3",
              "type": "t_bytes32",
              "contract": "NomadicKeeper",
              "src": "contracts/NomadicKeeper.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "UserRegistry": {
        "src": "contracts/UserRegistry.sol:3",
        "version": {
          "withMetadata": "d40b294f1ead8167d740ca911c5cde219095703686d89e02d99609a1e16c774e",
          "withoutMetadata": "b30a93cef89e5d27b17fc06b7db26c93013a621b0a8cef54a656705eb596ca60",
          "linkedWithoutMetadata": "b30a93cef89e5d27b17fc06b7db26c93013a621b0a8cef54a656705eb596ca60"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getUserByAddress()",
          "modifyUser(string,string,uint256)",
          "getRandom()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserRegistry",
            "src": "contracts/UserRegistry.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "owner",
            "src": "contracts/UserRegistry.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "userCount",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "UserRegistry",
              "src": "contracts/UserRegistry.sol:4"
            },
            {
              "label": "userByAddress",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(User)14_storage)",
              "contract": "UserRegistry",
              "src": "contracts/UserRegistry.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(User)14_storage)": {
              "label": "mapping(address => struct UserRegistry.User)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(User)14_storage": {
              "label": "struct UserRegistry.User",
              "members": [
                {
                  "label": "url",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "involvementBasis",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "imgType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "b35fba2ee6479f0ec36ad880500874423e65c0eb3c0bb1fada1e750a802da78d",
          "withoutMetadata": "38634e864a2963beb8b66fed05b47823757e57f102fa1d97815f4e8be2405c5a",
          "linkedWithoutMetadata": "38634e864a2963beb8b66fed05b47823757e57f102fa1d97815f4e8be2405c5a"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "e3e0ea3b37dd0a532fb3d3dd4563c03b469a827d02d9027bb93f5be0eea2dffe",
          "withoutMetadata": "1d91c28280d9f2dd0f0ad5fad4eed9dd79a060fea39975dd99f2839160b91411",
          "linkedWithoutMetadata": "1d91c28280d9f2dd0f0ad5fad4eed9dd79a060fea39975dd99f2839160b91411"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "c14e740e5948185e46262620d3426425af20df495a7326a7a6a67ccc97946cc4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "32c201d18bed9a97283017f99c308f5cea36031220935cd06b2b3430576c888b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DummyToken": {
        "src": "contracts/DummyToken.sol:7",
        "version": {
          "withMetadata": "76759ba41383f0b157e4bc013315390d9e0251cad7f2f1492a2990e8bb8d85da",
          "withoutMetadata": "a25719c6642c31e649e11fc2402abde82ddf442ce5eed12ff5bec4bdb611a2d2",
          "linkedWithoutMetadata": "a25719c6642c31e649e11fc2402abde82ddf442ce5eed12ff5bec4bdb611a2d2"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setPriceFeed(address)",
          "getPrice()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DummyToken",
            "src": "contracts/DummyToken.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "owner",
            "src": "contracts/DummyToken.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "DummyToken",
              "src": "contracts/DummyToken.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ProfileNFT": {
        "src": "contracts/ProfileNFT.sol:6",
        "version": {
          "withMetadata": "b59e5dfddfdf8dfe9c1f77810c3a5c8521c2cecfc49bb35f34a5af3bd9473cf7",
          "withoutMetadata": "453cc739cee6ab5b495b792b38ac70b42c3af6ac8032cadee6777366405ff22c",
          "linkedWithoutMetadata": "453cc739cee6ab5b495b792b38ac70b42c3af6ac8032cadee6777366405ff22c"
        },
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address)",
          "setBadge(address,string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProfileNFT",
            "src": "contracts/ProfileNFT.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "ProfileNFT",
              "src": "contracts/ProfileNFT.sol:7"
            },
            {
              "label": "badges",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_string_storage)",
              "contract": "ProfileNFT",
              "src": "contracts/ProfileNFT.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_string_storage)": {
              "label": "mapping(address => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MockChainlinkOracleFeed": {
        "src": "contracts/mock/MockChainlinkOracleFeed.sol:6",
        "version": {
          "withMetadata": "40e06de4ad48f84ddcc02fa729e8e131a9ca2fbfa3c0afa535ec69d271bca346",
          "withoutMetadata": "8fc8a025568ab8db808b99420de5a2ecb306b5163ff319ce77d0dc136f1e1f01",
          "linkedWithoutMetadata": "8fc8a025568ab8db808b99420de5a2ecb306b5163ff319ce77d0dc136f1e1f01"
        },
        "inherit": [
          "AggregatorV3Interface"
        ],
        "libraries": [],
        "methods": [
          "(int256,uint8)",
          "decimals()",
          "description()",
          "version()",
          "setPrice(int256)",
          "setDecimals(uint8)",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockChainlinkOracleFeed",
            "src": "contracts/mock/MockChainlinkOracleFeed.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "price",
              "offset": 0,
              "slot": "0",
              "type": "t_int256",
              "contract": "MockChainlinkOracleFeed",
              "src": "contracts/mock/MockChainlinkOracleFeed.sol:7"
            },
            {
              "label": "numDecimals",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "MockChainlinkOracleFeed",
              "src": "contracts/mock/MockChainlinkOracleFeed.sol:8"
            }
          ],
          "types": {
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "KeeperBase": {
        "src": "@chainlink/contracts/src/v0.8/KeeperBase.sol:4",
        "version": {
          "withMetadata": "706ab9b378a66d6014873a4ff72b96ec88d933ab0f508457a6834736247c9de9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "KeeperCompatible": {
        "src": "@chainlink/contracts/src/v0.8/KeeperCompatible.sol:7",
        "inherit": [
          "KeeperCompatibleInterface",
          "KeeperBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "KeeperCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "NomadicKeeper": {
        "src": "contracts/NomadicKeeper.sol:6",
        "version": {
          "withMetadata": "65f29c3316b8aaa0776bcc69bc57aade8a702dfa7ab4f08030c99c5d9992d450",
          "withoutMetadata": "2f527048a256c2190082822603321222cb5736b6265680cfb973d9e017d470e4",
          "linkedWithoutMetadata": "2f527048a256c2190082822603321222cb5736b6265680cfb973d9e017d470e4"
        },
        "inherit": [
          "KeeperCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "setConfig(bytes32)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NomadicKeeper",
            "src": "contracts/NomadicKeeper.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "lastRunDay",
            "src": "contracts/NomadicKeeper.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "vault",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "NomadicKeeper",
              "src": "contracts/NomadicKeeper.sol:9"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "NomadicKeeper",
              "src": "contracts/NomadicKeeper.sol:10"
            },
            {
              "label": "lastRunDay",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NomadicKeeper",
              "src": "contracts/NomadicKeeper.sol:11"
            },
            {
              "label": "config",
              "offset": 0,
              "slot": "3",
              "type": "t_bytes32",
              "contract": "NomadicKeeper",
              "src": "contracts/NomadicKeeper.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "UserRegistry": {
        "src": "contracts/UserRegistry.sol:3",
        "version": {
          "withMetadata": "d40b294f1ead8167d740ca911c5cde219095703686d89e02d99609a1e16c774e",
          "withoutMetadata": "b30a93cef89e5d27b17fc06b7db26c93013a621b0a8cef54a656705eb596ca60",
          "linkedWithoutMetadata": "b30a93cef89e5d27b17fc06b7db26c93013a621b0a8cef54a656705eb596ca60"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getUserByAddress()",
          "modifyUser(string,string,uint256)",
          "getRandom()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserRegistry",
            "src": "contracts/UserRegistry.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "owner",
            "src": "contracts/UserRegistry.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "userCount",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "UserRegistry",
              "src": "contracts/UserRegistry.sol:4"
            },
            {
              "label": "userByAddress",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(User)14_storage)",
              "contract": "UserRegistry",
              "src": "contracts/UserRegistry.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(User)14_storage)": {
              "label": "mapping(address => struct UserRegistry.User)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(User)14_storage": {
              "label": "struct UserRegistry.User",
              "members": [
                {
                  "label": "url",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "involvementBasis",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "imgType",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    }
  ]
}