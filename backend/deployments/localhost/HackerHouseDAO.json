{
  "address": "0xaB5E7B701B605f74AaC1b749Fd50715f0DEd7Bc5",
  "abi": [
    {
      "inputs": [],
      "name": "applyForMembership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "coreTeam",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "descriptionURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchAllApplicants",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "userAddr",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isMember",
              "type": "bool"
            },
            {
              "internalType": "address[]",
              "name": "approvers",
              "type": "address[]"
            }
          ],
          "internalType": "struct HackerHouseDAO.User[]",
          "name": "applicantsArr",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_parentAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_coreTeam",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_descriptionURI",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "membershipPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parentAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "userAddr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isMember",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x17a3d94f28139cae8226800d3f0980f6218d2ade3eb07175b0a4e8fc321bc097",
  "receipt": {
    "to": null,
    "from": "0x17BAd8cbCDeC350958dF0Bfe01E284dd8Fec3fcD",
    "contractAddress": "0xaB5E7B701B605f74AaC1b749Fd50715f0DEd7Bc5",
    "transactionIndex": 0,
    "gasUsed": "747490",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xc8ddd94b496eace5b8e8f64d37e63e96fc66903b2a963f0fc265d4e95ee69230",
    "transactionHash": "0x17a3d94f28139cae8226800d3f0980f6218d2ade3eb07175b0a4e8fc321bc097",
    "logs": [],
    "blockNumber": 29996768,
    "cumulativeGasUsed": "747490",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "021169431daa998820edb4d641ad3e1c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"applyForMembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coreTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"descriptionURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchAllApplicants\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMember\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"approvers\",\"type\":\"address[]\"}],\"internalType\":\"struct HackerHouseDAO.User[]\",\"name\":\"applicantsArr\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_parentAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_coreTeam\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_descriptionURI\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"membershipPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMember\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HackerHouseDAO.sol\":\"HackerHouseDAO\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/HackerHouseDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract HackerHouseDAO {\\n    using Counters for Counters.Counter;\\n\\n    address public parentAddress;\\n    uint256 id;\\n    Counters.Counter public userId;\\n    string public name;\\n    string public descriptionURI;\\n    address[] public coreTeam;\\n    uint256 public membershipPrice;\\n    bool public initialized = false;\\n    mapping (address => User) public users;\\n    address[] userAddresses;\\n\\n    struct User {\\n        uint256 id;\\n        bool exists;\\n        address userAddr;\\n        bool isMember;\\n        address[] approvers;\\n    }\\n\\n    function initialize(\\n        address _parentAddress,\\n        uint256 _id,\\n        address[] memory _coreTeam,\\n        string memory _name,\\n        string memory _descriptionURI\\n    ) external {\\n        require(initialized == false, \\\"Already initialized\\\");\\n        initialized = true;\\n        parentAddress = _parentAddress;\\n        id = _id;\\n        coreTeam = _coreTeam;\\n        name = _name;\\n        descriptionURI = _descriptionURI;\\n    }\\n\\n    function applyForMembership() external {\\n        require(!users[msg.sender].isMember, \\\"already a member or applicants\\\");\\n        uint256 _memId = userId.current();\\n        address[] memory _approvers;\\n        User memory _user = User({\\n            id: _memId,\\n            exists: true,\\n            userAddr: address(msg.sender),\\n            isMember: false,\\n            approvers: _approvers\\n        });\\n        users[msg.sender] = _user;\\n        userAddresses.push(msg.sender);\\n        userId.increment();\\n    }\\n\\n    function fetchAllApplicants() public view returns (User[] memory applicantsArr) {\\n        uint256 usersLen = userAddresses.length;\\n        uint256 applicantsCount = 0;\\n        uint256 currentIndex = 0;\\n\\n        for (uint256 i = 0; i < usersLen; i++) {\\n            if (!users[userAddresses[i]].isMember) {\\n                applicantsCount++;\\n            }\\n        }\\n        User[] memory applicantsArr = new User[](applicantsCount);\\n        for (uint256 i = 0; i < usersLen; i++) {\\n            if (!users[userAddresses[i]].isMember) {\\n                applicantsArr[currentIndex] = (users[userAddresses[i]]);\\n                currentIndex++;\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xc8ec0c3d97246a1bdde8a97b45e73f5a909a31df17b4f57586e2ea4e347796dc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526007805460ff1916905534801561001a57600080fd5b50610c848061002a6000396000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c80635897591911610071578063589759191461013b5780635e1ee52a14610145578063846198561461014d57806399ef1fe014610155578063a87430ba1461016a578063f1d2f93c146101e057600080fd5b8062821de3146100ad57806306fdde03146100dd5780630de3226b146100f257806314a88d6114610109578063158ef93e1461011e575b600080fd5b6000546100c0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e56101f3565b6040516100d49190610b52565b6100fb60065481565b6040519081526020016100d4565b61011c61011736600461095c565b610281565b005b60075461012b9060ff1681565b60405190151581526020016100d4565b6002546100fb9081565b61011c610341565b6100e56104bf565b61015d6104cc565b6040516100d49190610a84565b6101af61017836600461093b565b6008602052600090815260409020805460019091015460ff808216916001600160a01b0361010082041691600160a81b9091041684565b6040516100d4949392919093845291151560208401526001600160a01b031660408301521515606082015260800190565b6100c06101ee366004610a6c565b61079c565b6003805461020090610bd6565b80601f016020809104026020016040519081016040528092919081815260200182805461022c90610bd6565b80156102795780601f1061024e57610100808354040283529160200191610279565b820191906000526020600020905b81548152906001019060200180831161025c57829003601f168201915b505050505081565b60075460ff16156102cf5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064015b60405180910390fd5b60078054600160ff199091168117909155600080546001600160a01b0319166001600160a01b03881617905584905582516103119060059060208601906107c6565b50815161032590600390602085019061082b565b50805161033990600490602084019061082b565b505050505050565b33600090815260086020526040902060010154600160a81b900460ff16156103ab5760405162461bcd60e51b815260206004820152601e60248201527f616c72656164792061206d656d626572206f72206170706c6963616e7473000060448201526064016102c6565b60006103b660025490565b6040805160a0810182528281526001602080830182815233848601818152600060608781018281526080890182815294835260088752989091208751815593519584018054925198511515600160a81b0260ff60a81b196001600160a01b039a909a1661010002610100600160a81b0319981515989098166001600160a81b0319909416939093179690961797909716179093559151805195965093949293849361046792600285019201906107c6565b5050600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b03191633179055506104ba600280546001019055565b505050565b6004805461020090610bd6565b600954606090600080805b8381101561055b57600860006009838154811061050457634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190206001015460ff600160a81b90910416610549578261054581610c11565b9350505b8061055381610c11565b9150506104d7565b5060008267ffffffffffffffff81111561058557634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156105f557816020015b6105e26040518060a001604052806000815260200160001515815260200160006001600160a01b03168152602001600015158152602001606081525090565b8152602001906001900390816105a35790505b50905060005b8481101561079457600860006009838154811061062857634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190206001015460ff600160a81b9091041661078257600860006009838154811061068457634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b039081168452838201949094526040928301909120825160a08101845281548152600182015460ff808216151583860152610100820490961682860152600160a81b9004909416151560608501526002810180548451818502810185019095528085529193608086019390929083018282801561073f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610721575b50505050508152505082848151811061076857634e487b7160e01b600052603260045260246000fd5b6020026020010181905250828061077e90610c11565b9350505b8061078c81610c11565b9150506105fb565b505050505090565b600581815481106107ac57600080fd5b6000918252602090912001546001600160a01b0316905081565b82805482825590600052602060002090810192821561081b579160200282015b8281111561081b57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906107e6565b5061082792915061089f565b5090565b82805461083790610bd6565b90600052602060002090601f016020900481019282610859576000855561081b565b82601f1061087257805160ff191683800117855561081b565b8280016001018555821561081b579182015b8281111561081b578251825591602001919060010190610884565b5b8082111561082757600081556001016108a0565b80356001600160a01b03811681146108cb57600080fd5b919050565b600082601f8301126108e0578081fd5b813567ffffffffffffffff8111156108fa576108fa610c38565b61090d601f8201601f1916602001610ba5565b818152846020838601011115610921578283fd5b816020850160208301379081016020019190915292915050565b60006020828403121561094c578081fd5b610955826108b4565b9392505050565b600080600080600060a08688031215610973578081fd5b61097c866108b4565b94506020808701359450604087013567ffffffffffffffff808211156109a0578384fd5b818901915089601f8301126109b3578384fd5b8135818111156109c5576109c5610c38565b8060051b6109d4858201610ba5565b8281528581019085870183870188018f10156109ee578889fd5b8896505b84871015610a1757610a03816108b4565b8352600196909601959187019187016109f2565b5098505050506060890135925080831115610a30578384fd5b610a3c8a848b016108d0565b94506080890135925080831115610a51578384fd5b5050610a5f888289016108d0565b9150509295509295909350565b600060208284031215610a7d578081fd5b5035919050565b60006020808301818452808551808352604092508286019150828160051b870101848801865b83811015610b4457888303603f1901855281518051845287810151151588850152868101516001600160a01b039081168886015260608083015115159086015260809182015160a0928601839052805192860183905289019160c08601918b91905b81831015610b2e57845181168452938b0193928b019260019290920191610b0c565b5050509588019593505090860190600101610aaa565b509098975050505050505050565b6000602080835283518082850152825b81811015610b7e57858101830151858201604001528201610b62565b81811115610b8f5783604083870101525b50601f01601f1916929092016040019392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610bce57610bce610c38565b604052919050565b600181811c90821680610bea57607f821691505b60208210811415610c0b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415610c3157634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220580263227c084d6f50a4073c3ec16b324ddd622ff2e5edbb103254f0d5fae82f64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a85760003560e01c80635897591911610071578063589759191461013b5780635e1ee52a14610145578063846198561461014d57806399ef1fe014610155578063a87430ba1461016a578063f1d2f93c146101e057600080fd5b8062821de3146100ad57806306fdde03146100dd5780630de3226b146100f257806314a88d6114610109578063158ef93e1461011e575b600080fd5b6000546100c0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e56101f3565b6040516100d49190610b52565b6100fb60065481565b6040519081526020016100d4565b61011c61011736600461095c565b610281565b005b60075461012b9060ff1681565b60405190151581526020016100d4565b6002546100fb9081565b61011c610341565b6100e56104bf565b61015d6104cc565b6040516100d49190610a84565b6101af61017836600461093b565b6008602052600090815260409020805460019091015460ff808216916001600160a01b0361010082041691600160a81b9091041684565b6040516100d4949392919093845291151560208401526001600160a01b031660408301521515606082015260800190565b6100c06101ee366004610a6c565b61079c565b6003805461020090610bd6565b80601f016020809104026020016040519081016040528092919081815260200182805461022c90610bd6565b80156102795780601f1061024e57610100808354040283529160200191610279565b820191906000526020600020905b81548152906001019060200180831161025c57829003601f168201915b505050505081565b60075460ff16156102cf5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064015b60405180910390fd5b60078054600160ff199091168117909155600080546001600160a01b0319166001600160a01b03881617905584905582516103119060059060208601906107c6565b50815161032590600390602085019061082b565b50805161033990600490602084019061082b565b505050505050565b33600090815260086020526040902060010154600160a81b900460ff16156103ab5760405162461bcd60e51b815260206004820152601e60248201527f616c72656164792061206d656d626572206f72206170706c6963616e7473000060448201526064016102c6565b60006103b660025490565b6040805160a0810182528281526001602080830182815233848601818152600060608781018281526080890182815294835260088752989091208751815593519584018054925198511515600160a81b0260ff60a81b196001600160a01b039a909a1661010002610100600160a81b0319981515989098166001600160a81b0319909416939093179690961797909716179093559151805195965093949293849361046792600285019201906107c6565b5050600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b03191633179055506104ba600280546001019055565b505050565b6004805461020090610bd6565b600954606090600080805b8381101561055b57600860006009838154811061050457634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190206001015460ff600160a81b90910416610549578261054581610c11565b9350505b8061055381610c11565b9150506104d7565b5060008267ffffffffffffffff81111561058557634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156105f557816020015b6105e26040518060a001604052806000815260200160001515815260200160006001600160a01b03168152602001600015158152602001606081525090565b8152602001906001900390816105a35790505b50905060005b8481101561079457600860006009838154811061062857634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190206001015460ff600160a81b9091041661078257600860006009838154811061068457634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b039081168452838201949094526040928301909120825160a08101845281548152600182015460ff808216151583860152610100820490961682860152600160a81b9004909416151560608501526002810180548451818502810185019095528085529193608086019390929083018282801561073f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610721575b50505050508152505082848151811061076857634e487b7160e01b600052603260045260246000fd5b6020026020010181905250828061077e90610c11565b9350505b8061078c81610c11565b9150506105fb565b505050505090565b600581815481106107ac57600080fd5b6000918252602090912001546001600160a01b0316905081565b82805482825590600052602060002090810192821561081b579160200282015b8281111561081b57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906107e6565b5061082792915061089f565b5090565b82805461083790610bd6565b90600052602060002090601f016020900481019282610859576000855561081b565b82601f1061087257805160ff191683800117855561081b565b8280016001018555821561081b579182015b8281111561081b578251825591602001919060010190610884565b5b8082111561082757600081556001016108a0565b80356001600160a01b03811681146108cb57600080fd5b919050565b600082601f8301126108e0578081fd5b813567ffffffffffffffff8111156108fa576108fa610c38565b61090d601f8201601f1916602001610ba5565b818152846020838601011115610921578283fd5b816020850160208301379081016020019190915292915050565b60006020828403121561094c578081fd5b610955826108b4565b9392505050565b600080600080600060a08688031215610973578081fd5b61097c866108b4565b94506020808701359450604087013567ffffffffffffffff808211156109a0578384fd5b818901915089601f8301126109b3578384fd5b8135818111156109c5576109c5610c38565b8060051b6109d4858201610ba5565b8281528581019085870183870188018f10156109ee578889fd5b8896505b84871015610a1757610a03816108b4565b8352600196909601959187019187016109f2565b5098505050506060890135925080831115610a30578384fd5b610a3c8a848b016108d0565b94506080890135925080831115610a51578384fd5b5050610a5f888289016108d0565b9150509295509295909350565b600060208284031215610a7d578081fd5b5035919050565b60006020808301818452808551808352604092508286019150828160051b870101848801865b83811015610b4457888303603f1901855281518051845287810151151588850152868101516001600160a01b039081168886015260608083015115159086015260809182015160a0928601839052805192860183905289019160c08601918b91905b81831015610b2e57845181168452938b0193928b019260019290920191610b0c565b5050509588019593505090860190600101610aaa565b509098975050505050505050565b6000602080835283518082850152825b81811015610b7e57858101830151858201604001528201610b62565b81811115610b8f5783604083870101525b50601f01601f1916929092016040019392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610bce57610bce610c38565b604052919050565b600181811c90821680610bea57607f821691505b60208210811415610c0b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415610c3157634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220580263227c084d6f50a4073c3ec16b324ddd622ff2e5edbb103254f0d5fae82f64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 394,
        "contract": "contracts/HackerHouseDAO.sol:HackerHouseDAO",
        "label": "parentAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 396,
        "contract": "contracts/HackerHouseDAO.sol:HackerHouseDAO",
        "label": "id",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 399,
        "contract": "contracts/HackerHouseDAO.sol:HackerHouseDAO",
        "label": "userId",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 401,
        "contract": "contracts/HackerHouseDAO.sol:HackerHouseDAO",
        "label": "name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 403,
        "contract": "contracts/HackerHouseDAO.sol:HackerHouseDAO",
        "label": "descriptionURI",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 406,
        "contract": "contracts/HackerHouseDAO.sol:HackerHouseDAO",
        "label": "coreTeam",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 408,
        "contract": "contracts/HackerHouseDAO.sol:HackerHouseDAO",
        "label": "membershipPrice",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 411,
        "contract": "contracts/HackerHouseDAO.sol:HackerHouseDAO",
        "label": "initialized",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 416,
        "contract": "contracts/HackerHouseDAO.sol:HackerHouseDAO",
        "label": "users",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(User)431_storage)"
      },
      {
        "astId": 419,
        "contract": "contracts/HackerHouseDAO.sol:HackerHouseDAO",
        "label": "userAddresses",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(User)431_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct HackerHouseDAO.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)431_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)5_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/HackerHouseDAO.sol:HackerHouseDAO",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(User)431_storage": {
        "encoding": "inplace",
        "label": "struct HackerHouseDAO.User",
        "members": [
          {
            "astId": 421,
            "contract": "contracts/HackerHouseDAO.sol:HackerHouseDAO",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 423,
            "contract": "contracts/HackerHouseDAO.sol:HackerHouseDAO",
            "label": "exists",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 425,
            "contract": "contracts/HackerHouseDAO.sol:HackerHouseDAO",
            "label": "userAddr",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 427,
            "contract": "contracts/HackerHouseDAO.sol:HackerHouseDAO",
            "label": "isMember",
            "offset": 21,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 430,
            "contract": "contracts/HackerHouseDAO.sol:HackerHouseDAO",
            "label": "approvers",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}