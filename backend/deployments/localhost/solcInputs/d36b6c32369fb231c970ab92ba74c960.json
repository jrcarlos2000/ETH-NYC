{
  "language": "Solidity",
  "sources": {
    "contracts/NomadicKeeper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\";\n\ncontract NomadicKeeper is KeeperCompatibleInterface {\n    event ConfigUpdated(bytes32 config);\n\n    address public vault;\n    address public owner;\n    uint256 lastRunDay = 0;\n    bytes32 public config; // we use bytes for saving gas\n\n    constructor(\n        bytes32 config_,\n        address vault_\n    ) {\n        vault = vault_;\n        config = config_;\n        owner = msg.sender;\n    }\n\n    function setConfig(bytes32 config_) external {\n        require(msg.sender == owner);\n        config = config_;\n        emit ConfigUpdated(config);\n    }\n\n    function checkUpkeep(bytes calldata checkData)\n        external\n        view\n        override\n        returns (bool upkeepNeeded, bytes memory performData)\n    {\n        (bool runCheck) = _shouldRun();\n        upkeepNeeded = (runCheck);\n        performData = checkData;\n    }\n\n    function performUpkeep(bytes calldata performData) external override {\n        (bool runCheck) = _shouldRun();\n        if (runCheck) {\n            // write today, so that we only run once per day\n            lastRunDay = (block.timestamp / 86400);\n        }\n        if (runCheck) {\n            vault.call(abi.encodeWithSignature(\"checkDeadlines()\"));\n        }\n        \n    }\n\n    function _shouldRun()\n        internal\n        view\n        returns (bool runCheck)\n    {\n        bytes32 _config = config; // Gas savings\n\n        // Have we run today?\n        uint256 day = block.timestamp / 86400;\n        if (lastRunDay >= day) {\n            return (false);\n        }\n\n        // Load schedule\n        uint8 checkDays = uint8(_config[0]); // day of week bits\n\n        // Weekday\n        uint8 weekday = uint8((day + 4) % 7);\n\n        // Need a runCheck?\n        if (((checkDays >> weekday) & 1) != 0) {\n            runCheck = true;\n        }\n    }\n}"
    },
    "@chainlink/contracts/src/v0.8/KeeperCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./KeeperBase.sol\";\nimport \"./interfaces/KeeperCompatibleInterface.sol\";\n\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\n"
    },
    "@chainlink/contracts/src/v0.8/KeeperBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract KeeperBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function preventExecution() internal view {\n    if (tx.origin != address(0)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    preventExecution();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}