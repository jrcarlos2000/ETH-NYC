{
  "language": "Solidity",
  "sources": {
    "contracts/HackerHouseDAO.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract HackerHouseDAO {\n    using Counters for Counters.Counter;\n\n    address public parentAddress;\n    uint256 id;\n    Counters.Counter public userId;\n    string public name;\n    string public descriptionURI;\n    address[] public coreTeam;\n    uint256 public membershipPrice;\n    bool public initialized = false;\n    mapping (address => User) public users;\n    address[] userAddresses;\n\n    struct User {\n        uint256 id;\n        bool exists;\n        address userAddr;\n        bool isMember;\n        address[] approvers;\n    }\n\n    function initialize(\n        address _parentAddress,\n        uint256 _id,\n        address[] memory _coreTeam,\n        string memory _name,\n        string memory _descriptionURI\n    ) external {\n        require(initialized == false, \"Already initialized\");\n        initialized = true;\n        parentAddress = _parentAddress;\n        id = _id;\n        coreTeam = _coreTeam;\n        name = _name;\n        descriptionURI = _descriptionURI;\n    }\n\n    function applyForMembership() external {\n        require(!users[msg.sender].isMember, \"already a member or applicants\");\n        uint256 _memId = userId.current();\n        address[] memory _approvers;\n        User memory _user = User({\n            id: _memId,\n            exists: true,\n            userAddr: address(msg.sender),\n            isMember: false,\n            approvers: _approvers\n        });\n        users[msg.sender] = _user;\n        userAddresses.push(msg.sender);\n        userId.increment();\n    }\n\n    function fetchAllApplicants() public view returns (User[] memory applicantsArr) {\n        uint256 usersLen = userAddresses.length;\n        uint256 applicantsCount = 0;\n        uint256 currentIndex = 0;\n\n        for (uint256 i = 0; i < usersLen; i++) {\n            if (!users[userAddresses[i]].isMember) {\n                applicantsCount++;\n            }\n        }\n        User[] memory applicantsArr = new User[](applicantsCount);\n        for (uint256 i = 0; i < usersLen; i++) {\n            if (!users[userAddresses[i]].isMember) {\n                applicantsArr[currentIndex] = (users[userAddresses[i]]);\n                currentIndex++;\n            }\n        }\n    }\n}"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/NomadicVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./HackerHouseDAO.sol\";\n\ncontract NomadicVault {\n    using SafeMath for uint256;\n    using Counters for Counters.Counter;\n\n    struct ShortStay {\n        uint256 id;\n        string descriptionURI;\n        address trustee;\n        uint256 nPersons;\n        uint256 slotsReserved;\n        uint256 amountFunded;\n        address[] members;\n        uint256 totalPrice;\n        uint256 pricePerPerson;\n        uint256 deadline;\n        bool isCreatorSlot; // true if creator of short stay is one of the persons staying (nPersons)\n        bool isActive; // if stay is currently open for booking\n        bool isFull; // if all member slots are filled or not\n    }\n\n    struct HackerHouse {\n        uint256 id;\n        address addr;\n        bool isActive;\n        address[] coreTeam;\n        string name;\n        string descriptionURI;\n    }\n\n    mapping (uint256 => ShortStay) public stays;\n    mapping (uint256 => HackerHouse) public hhouses;\n\n    address public owner;\n    address public hhTemplate;\n    address[] public hhAddresses;\n    Counters.Counter public stayId;\n    Counters.Counter public daoId;\n\n    event ProposeStay(uint256 _stayId, address _trustee);\n    event JoinStay(uint256 _stayId, address _newMember);\n    event StayIsFull(uint256 _stayId);\n    event DAOProposed(uint256 _daoId);\n    event HHouseDeployed(uint256 _daoId, address _daoAddress, string _daoName);\n\n    constructor(address _hhTemplate) {\n        owner = msg.sender;\n        hhTemplate = _hhTemplate;\n    }\n\n    modifier onlyActiveShortStay(uint256 _stayId) {\n        require(stays[_stayId].isActive && !stays[_stayId].isFull && stays[_stayId].deadline > block.timestamp, \"Stay is full, inactive or deadline was reached\");\n        _;\n    }\n\n    function proposeShortStay(\n        string memory _descriptionURI,\n        uint256 _nPersons,\n        uint256 _totalPrice,\n        uint256 _timeAvailable,\n        bool _isCreatorSlot\n    ) external returns (uint256) {\n        require(_nPersons > 0, \"At least one room required\");\n        uint256 _stayId = stayId.current(); \n        uint256 _slotsReserved = _isCreatorSlot ? 1 : 0;\n        address[] memory _members = new address[](_nPersons);\n\n        if (_isCreatorSlot) {\n            _members[0] = msg.sender;\n        }\n\n        stays[_stayId] = ShortStay({\n            id: _stayId,\n            descriptionURI: _descriptionURI,\n            trustee: msg.sender,\n            nPersons: _nPersons,\n            slotsReserved: _slotsReserved,\n            amountFunded: 0,\n            members: _members,\n            totalPrice: _totalPrice,\n            pricePerPerson: (_totalPrice / _nPersons ) + 1,\n            deadline: block.timestamp + _timeAvailable,\n            isCreatorSlot: _isCreatorSlot,\n            isActive: true,\n            isFull: false\n        });\n        stayId.increment();\n        emit ProposeStay(_stayId, msg.sender);\n        return _stayId;\n    }\n\n    function joinShortStay(\n        uint256 _stayId\n    ) external payable onlyActiveShortStay(_stayId) {\n        ShortStay storage _stay = stays[_stayId];\n        require(msg.value >= _stay.pricePerPerson, \"Insufficient value sent\");\n        bool isMember = false;\n        // make sure that the sender is not already a member of the stay\n        uint256 i = 0;\n        uint256 memLen = _stay.nPersons;\n        for (i; i < memLen; i++) {\n            if (_stay.members[i] == msg.sender) {\n                isMember = true;\n                break;\n            }\n        }\n        require(!isMember, \"You are already signed up\");\n        _stay.members.push(msg.sender);\n        _stay.slotsReserved++;\n        _stay.amountFunded += _stay.pricePerPerson;\n        emit JoinStay(_stayId, msg.sender);\n\n        if (_stay.slotsReserved >= _stay.nPersons) {\n            _stay.isFull = true;\n            emit StayIsFull(_stayId);\n        }\n    }\n\n    function getShortStays(uint256[] memory _stayIndexes) public view returns(ShortStay[] memory) {\n        uint256 returnStaysLen = _stayIndexes.length;\n        ShortStay[] memory returnStays = new ShortStay[](returnStaysLen);\n\n        uint256 stayLen = _stayIndexes.length;\n        uint256 i = 0;\n        for (i; i < stayLen; i++) {\n            returnStays[i] = stays[_stayIndexes[i]];\n        }\n        return returnStays;\n    }\n\n    function checkDeadlines() external {\n        uint256 stayLen = stayId.current(); \n        uint256 i = 0;\n        for(i;i<stayLen;i++){\n            checkSingleDeadline(i);\n        }\n    }\n\n    function checkSingleDeadline(uint256 id) internal {\n        if(stays[id].deadline < block.timestamp){\n            stays[id].isActive = false;\n        }\n    }\n\n    function proposeDao(string memory _name, string memory _descriptionURI, uint256 _membershipCost) external {\n        uint256 _daoId = daoId.current();\n        address[] memory _coreTeam;\n        _coreTeam[0] = address(msg.sender);\n\n        hhouses[_daoId] = HackerHouse({\n            id: _daoId,\n            addr: address(0),\n            isActive: false,\n            coreTeam: _coreTeam,\n            name: _name,\n            descriptionURI: _descriptionURI\n        });\n        emit DAOProposed(_daoId);\n\n        daoId.increment();\n    }\n\n    function joinCoreTeam(uint256 _daoId) external {\n        require(!hhouses[_daoId].isActive, \"dao is already active\");\n        hhouses[_daoId].coreTeam.push(msg.sender);\n        if (hhouses[_daoId].coreTeam.length == 5) {\n            hhouses[_daoId].isActive = true;\n            _deployHHouse(_daoId);\n        }\n    }\n\n    function _deployHHouse(uint256 _daoId) internal {\n        HackerHouseDAO hhDao = HackerHouseDAO(_createClone(hhTemplate));\n\n        hhDao.initialize(address(this), _daoId, hhouses[_daoId].coreTeam, hhouses[_daoId].name, hhouses[_daoId].descriptionURI);\n        hhouses[_daoId].addr = address(hhDao);\n        hhAddresses.push(address(hhDao));\n\n        emit HHouseDeployed(_daoId, address(hhDao), hhouses[_daoId].name);\n    }\n\n    function _createClone(address target) internal returns (address result) {\n        bytes20 targetBytes = bytes20(target);\n        assembly {\n            let clone := mload(0x40)\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(clone, 0x14), targetBytes)\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            result := create(0, clone, 0x37)\n        }\n    }\n}"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/NomadicWorldCoin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport { ByteHasher } from './helpers/ByteHasher.sol';\nimport { IWorldID } from './interfaces/IWorldID.sol';\n\ncontract NomadicWorldCoin {\n\n    using ByteHasher for bytes;\n\n    ///////////////////////////////////////////////////////////////////////////////\n    ///                                  ERRORS                                ///\n    //////////////////////////////////////////////////////////////////////////////\n\n    /// @notice Thrown when attempting to reuse a nullifier\n    error InvalidNullifier();\n\n    /// @dev The WorldID instance that will be used for verifying proofs\n    IWorldID internal immutable worldId;\n\n    /// @dev The WorldID group ID (1)\n    uint256 internal immutable groupId = 1;\n\n    /// @dev Whether a nullifier hash has been used already. Used to prevent double-signaling\n    mapping(uint256 => bool) internal nullifierHashes;\n    using SafeMath for uint256;\n    using Counters for Counters.Counter;\n\n    struct ShortStay {\n        uint256 id;\n        string descriptionURI;\n        address trustee;\n        uint256 nPersons;\n        uint256 slotsReserved;\n        uint256 amountFunded;\n        address[] members;\n        uint256 totalPrice;\n        uint256 pricePerPerson;\n        uint256 deadline;\n        bool isCreatorSlot; // true if creator of short stay is one of the persons staying (nPersons)\n        bool isActive; // if stay is currently open for booking\n        bool isFull; // if all member slots are filled or not\n    }\n\n    mapping (uint256 => ShortStay) public stays ; \n    address public owner;\n    Counters.Counter public stayId;\n\n    event ProposeStay(uint256 _stayId, address _trustee);\n    event JoinStay(uint256 _stayId, address _newMember);\n    event StayIsFull(uint256 _stayId);\n\n    constructor(IWorldID _worldId) {\n        worldId = _worldId;\n        owner = msg.sender;\n    }\n\n\n    modifier onlyActiveShortStay(uint256 _stayId) {\n        require(stays[_stayId].isActive && !stays[_stayId].isFull && stays[_stayId].deadline > block.timestamp, \"HackerHouse: Stay is full, inactive or deadline was reached\");\n        _;\n    }\n\n    function proposeShortStay(\n        string memory _descriptionURI,\n        uint256 _nPersons,\n        uint256 _totalPrice,\n        uint256 _timeAvailable,\n        bool _isCreatorSlot,\n        uint256 root,\n        uint256 nullifierHash,\n        uint256[8] calldata proof\n    ) external returns (uint256) {\n        require(_nPersons > 0, \"HackerHouse: At least one room required\");\n        if (nullifierHashes[nullifierHash]) revert InvalidNullifier();\n        uint256 _stayId = stayId.current(); \n        worldId.verifyProof(\n            root,\n            groupId,\n            abi.encodePacked(_descriptionURI,_nPersons,_totalPrice,_timeAvailable).hashToField(),\n            nullifierHash,\n            abi.encodePacked(address(this)).hashToField(),\n            proof\n        );\n\n        // finally, we record they've done this, so they can't do it again (proof of uniqueness)\n        nullifierHashes[nullifierHash] = true;\n        uint256 _slotsReserved = _isCreatorSlot ? 1 : 0;\n        address[] memory _members = new address[](_nPersons);\n\n        if (_isCreatorSlot) {\n            _members[0] = msg.sender;\n        }\n\n        stays[_stayId] = ShortStay({\n            id: _stayId,\n            descriptionURI: _descriptionURI,\n            trustee: msg.sender,\n            nPersons: _nPersons,\n            slotsReserved: _slotsReserved,\n            amountFunded: 0,\n            members: _members,\n            totalPrice: _totalPrice,\n            pricePerPerson: (_totalPrice / _nPersons ) + 1,\n            deadline: block.timestamp + _timeAvailable,\n            isCreatorSlot: _isCreatorSlot,\n            isActive: true,\n            isFull: false\n        });\n        stayId.increment();\n        emit ProposeStay(_stayId, msg.sender);\n        return _stayId;\n    }\n\n    function joinShortStay(\n        uint256 _stayId\n    ) external payable onlyActiveShortStay(_stayId) {\n        ShortStay storage _stay = stays[_stayId];\n        require(msg.value >= _stay.pricePerPerson, \"HackerHouse: Insufficient value sent\");\n        bool isMember = false;\n        // make sure that the sender is not already a member of the stay\n        uint256 i = 0;\n        uint256 memLen = _stay.nPersons;\n        for (i; i < memLen; i++) {\n            if (_stay.members[i] == msg.sender) {\n                isMember = true;\n                break;\n            }\n        }\n        require(!isMember, \"HackerHouse: You are already signed up\");\n        _stay.members.push(msg.sender);\n        _stay.slotsReserved++;\n        _stay.amountFunded += _stay.pricePerPerson;\n        emit JoinStay(_stayId, msg.sender);\n\n        if (_stay.slotsReserved >= _stay.nPersons) {\n            _stay.isFull = true;\n            emit StayIsFull(_stayId);\n        }\n    }\n\n    function getShortStays(uint256[] memory _stayIndexes) external returns(ShortStay[] memory) {\n        ShortStay[] memory returnStays;\n        uint256 stayLen = _stayIndexes.length;\n        uint256 i = 0;\n        for (i; i < stayLen; i++) {\n            returnStays[i] = stays[_stayIndexes[i]];\n        }\n        return returnStays;\n    }\n\n    function checkDeadlines() external {\n        uint256 stayLen = stayId.current(); \n        uint256 i = 0;\n        for(i;i<stayLen;i++){\n            checkSingleDeadline(i);\n        }\n    }\n\n    function checkSingleDeadline(uint256 id) internal {\n        if(stays[id].deadline < block.timestamp){\n            stays[id].isActive = false;\n        }\n    }\n}"
    },
    "contracts/helpers/ByteHasher.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary ByteHasher {\n    /// @dev Creates a keccak256 hash of a bytestring.\n    /// @param value The bytestring to hash\n    /// @return The hash of the specified value\n    /// @dev `>> 8` makes sure that the result is included in our field\n    function hashToField(bytes memory value) internal pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(value))) >> 8;\n    }\n}"
    },
    "contracts/interfaces/IWorldID.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IWorldID {\n    /// @notice Reverts if the zero-knowledge proof is invalid.\n    /// @param root The of the Merkle tree\n    /// @param groupId The id of the Semaphore group\n    /// @param signalHash A keccak256 hash of the Semaphore signal\n    /// @param nullifierHash The nullifier hash\n    /// @param externalNullifierHash A keccak256 hash of the external nullifier\n    /// @param proof The zero-knowledge proof\n    /// @dev  Note that a double-signaling check is not included here, and should be carried by the caller.\n    function verifyProof(\n        uint256 root,\n        uint256 groupId,\n        uint256 signalHash,\n        uint256 nullifierHash,\n        uint256 externalNullifierHash,\n        uint256[8] calldata proof\n    ) external view;\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}